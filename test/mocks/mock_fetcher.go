// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/platform_get_resources.go
//
// Generated by this command:
//
//	mockgen -source=cmd/platform_get_resources.go -package=mock_fetcher
//

// Package mock_fetcher is a generated GoMock package.
package mock_fetcher

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
	isgomock struct{}
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// GVRForPromise mocks base method.
func (m *MockFetcher) GVRForPromise(ctx context.Context, promiseName string) (*schema.GroupVersionResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GVRForPromise", ctx, promiseName)
	ret0, _ := ret[0].(*schema.GroupVersionResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GVRForPromise indicates an expected call of GVRForPromise.
func (mr *MockFetcherMockRecorder) GVRForPromise(ctx, promiseName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GVRForPromise", reflect.TypeOf((*MockFetcher)(nil).GVRForPromise), ctx, promiseName)
}

// GetKratixGVRs mocks base method.
func (m *MockFetcher) GetKratixGVRs(ctx context.Context) ([]schema.GroupVersionResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKratixGVRs", ctx)
	ret0, _ := ret[0].([]schema.GroupVersionResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKratixGVRs indicates an expected call of GetKratixGVRs.
func (mr *MockFetcherMockRecorder) GetKratixGVRs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKratixGVRs", reflect.TypeOf((*MockFetcher)(nil).GetKratixGVRs), ctx)
}

// GetRequests mocks base method.
func (m *MockFetcher) GetRequests(ctx context.Context, gvr *schema.GroupVersionResource, promiseName, selector string) (*unstructured.UnstructuredList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequests", ctx, gvr, promiseName, selector)
	ret0, _ := ret[0].(*unstructured.UnstructuredList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequests indicates an expected call of GetRequests.
func (mr *MockFetcherMockRecorder) GetRequests(ctx, gvr, promiseName, selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequests", reflect.TypeOf((*MockFetcher)(nil).GetRequests), ctx, gvr, promiseName, selector)
}
